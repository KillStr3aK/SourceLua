# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

projectName = 'SourceLua'

# smsdk_ext.cpp will be automatically added later
sourceFiles = [
  # Barebone
  'extension.cpp',

  # SourceLua SDK
  'SDK/LuaEngine.cpp',
  'SDK/LuaRuntime.cpp',
  'SDK/LuaScriptManifest.cpp',
  'SDK/LuaScript.cpp',
  'SDK/LuaScripting.cpp',
  'SDK/LuaScriptManager.cpp',
  'SDK/Common/Console.cpp',

  # Lua source
  'SDK/Libs/Lua/lua.c',
  'SDK/Libs/Lua/lapi.c',
  'SDK/Libs/Lua/lauxlib.c',
  'SDK/Libs/Lua/lbaselib.c',
  'SDK/Libs/Lua/lbitlib.c',
  'SDK/Libs/Lua/lcode.c',
  'SDK/Libs/Lua/lcorolib.c',
  'SDK/Libs/Lua/lctype.c',
  'SDK/Libs/Lua/ldblib.c',
  'SDK/Libs/Lua/ldebug.c',
  'SDK/Libs/Lua/ldo.c',
  'SDK/Libs/Lua/ldump.c',
  'SDK/Libs/Lua/lfunc.c',
  'SDK/Libs/Lua/lgc.c',
  'SDK/Libs/Lua/linit.c',
  'SDK/Libs/Lua/liolib.c',
  'SDK/Libs/Lua/llex.c',
  'SDK/Libs/Lua/lmathlib.c',
  'SDK/Libs/Lua/lmem.c',
  'SDK/Libs/Lua/loadlib.c',
  'SDK/Libs/Lua/lobject.c',
  'SDK/Libs/Lua/lopcodes.c',
  'SDK/Libs/Lua/loslib.c',
  'SDK/Libs/Lua/lparser.c',
  'SDK/Libs/Lua/lstate.c',
  'SDK/Libs/Lua/lstring.c',
  'SDK/Libs/Lua/lstrlib.c',
  'SDK/Libs/Lua/ltable.c',
  'SDK/Libs/Lua/ltablib.c',
  'SDK/Libs/Lua/ltm.c',
  'SDK/Libs/Lua/luac.c',
  'SDK/Libs/Lua/lundump.c',
  'SDK/Libs/Lua/lutf8lib.c',
  'SDK/Libs/Lua/lvm.c',
  'SDK/Libs/Lua/lzio.c'
]

###############
# Make sure to edit PackageScript, which copies your files to their appropriate locations
# Simple extensions do not need to modify past this point.

project = Extension.HL2Project(builder, projectName + '.ext')

if os.path.isfile(os.path.join(builder.currentSourcePath, 'sdk', 'smsdk_ext.cpp')):
  # Use the copy included in the project
  project.sources += [os.path.join('sdk', 'smsdk_ext.cpp')]
else:
  # Use the copy included with SM 1.6 and newer
  project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles

binary = Extension.HL2Config(project, projectName + '.ext')

Extension.extensions = builder.Add(project)

